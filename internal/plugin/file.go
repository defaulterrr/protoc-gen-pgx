package plugin

import (
	"fmt"
	"log/slog"
	"strings"
	"text/template"

	"golang.org/x/text/cases"
	"golang.org/x/text/language"

	"google.golang.org/protobuf/compiler/protogen"
)

func GenerateDecoratorsForMessages(p *protogen.Plugin, path string, file *protogen.File, template *template.Template, messages ...*protogen.Message) error {
	for _, message := range messages {
		tableName := PostgresTableNameForMessage(message)

		capitalized := cases.Title(language.English).String(tableName)
		lowercased := cases.Lower(language.English).String(tableName)

		opts := Meta{
			TableName:           tableName,
			MainTypeCapitalized: capitalized,
			MainTypeLowercased:  lowercased,
			Types:               []Fields{},
		}

		for _, field := range message.Fields {
			name := string(field.Desc.Name())
			gotype, err := PostgresTypeFromProtobufType(field)
			if err != nil {
				return fmt.Errorf("failed to map message %s from file %s to postgres type: %w", message.Desc.Name(), path, err)
			}
			opts.Types = append(opts.Types, Fields{
				Name:               name,
				GoType:             gotype,
				MainTypeLowercased: lowercased,
			})
		}

		slog.Debug("Table for message", "message", message.Desc.FullName(), "table", tableName)

		filename := file.GeneratedFilenamePrefix + "_" + strings.ToLower(message.GoIdent.GoName) + "_" + "pgx.pb.go"

		generatedFile := p.NewGeneratedFile(filename, message.GoIdent.GoImportPath)

		generatedFile.Write([]byte("// DO NOT EDIT: file generated by protoc-gen-pgx\n"))
		generatedFile.P("package ", file.GoPackageName, "\n")

		generatedFile.P("import \"" + "github.com/jackc/pgx/v5/pgxpool" + "\"")
		generatedFile.P("import \"" + "github.com/jackc/pgx/v5" + "\"")
		generatedFile.P("import \"" + "context" + "\"")
		generatedFile.P("import \"" + "fmt" + "\"")

		if err := template.Execute(generatedFile, opts); err != nil {
			slog.Error("Failed to write templated file", "error", err)
			return err
		}
	}

	return nil
}
