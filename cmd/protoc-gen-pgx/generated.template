type {{ .MainTypeCapitalized }}Repository struct {
	pool *pgxpool.Pool
}

func New{{ .MainTypeCapitalized }}Repository(pool *pgxpool.Pool) *{{ .MainTypeCapitalized }}Repository {
	return &{{ .MainTypeCapitalized }}Repository{
		pool: pool,
	}
}

type {{ .MainTypeCapitalized }} struct {
	{{ range .Types }}
	{{ .Name }}	{{ .GoType }}{{ end }}
}

const insertQuery = `
INSERT INTO {{.TableName}} 
({{ range $index, $element := .Types }}{{ if $index}},{{end}}{{.Name }}{{end}})
VALUES 
({{ range $index, $element := .Types }}{{ if $index}}, {{end}}@{{ $element.Name }}{{ end }})
`

func (repo *{{ .MainTypeCapitalized }}Repository) Insert{{ .MainTypeCapitalized }}(ctx context.Context, {{ .MainTypeLowercased }} {{ .MainTypeCapitalized }}) error {
	conn, err := repo.pool.Acquire(ctx)
	if err != nil {
		return err
	}
	defer conn.Release()

	args := pgx.NamedArgs{
		{{ range .Types }}"{{ .Name }}": {{ .MainTypeLowercased }}.{{ .Name }},
	{{ end }}}

	if _, err := conn.Exec(ctx, insertQuery, args); err != nil {
		return fmt.Errorf("failed to insert data into {{ .TableName }} table: %w", err)
	}

	return nil
}
