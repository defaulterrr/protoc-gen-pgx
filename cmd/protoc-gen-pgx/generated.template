type PersonsRepository struct {
	pool *pgxpool.Pool
}

func NewPersonsRepository(pool *pgxpool.Pool) *PersonsRepository {
	return &PersonsRepository{
		pool: pool,
	}
}

type Person struct {
	{{ range .Types }}
	{{ .Name }} {{ .GoType }}
	{{ end }}
}

const insertQuery = `
INSERT INTO {{.Table}} 
({{ range $index, $element := .Types }}{{ if $index}},{{end}}{{.Name }}{{end}})
VALUES 
({{ range $index, $element := .Types }}{{ if $index}}, {{end}}@{{ $element.Name }}{{ end }})
`

func (repo *PersonsRepository) InsertPerson(ctx context.Context, person Person) error {
	conn, err := repo.pool.Acquire(ctx)
	if err != nil {
		return err
	}
	defer conn.Release()

	args := pgx.NamedArgs{
		{{ range .Types }}"{{ .Name }}": person.{{ .Name }},
	{{ end }}}

	if _, err := conn.Exec(ctx, insertQuery, args); err != nil {
		return fmt.Errorf("failed to insert data into persons table: %w", err)
	}

	return nil
}
