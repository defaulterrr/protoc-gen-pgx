package main

import (
	_ "embed"
	"log/slog"
	"os"
	"strings"
	"text/template"

	"github.com/defaulterrr/protoc-gen-pgx/internal/plugin"
	pb "github.com/defaulterrr/protoc-gen-pgx/pb/annotations"
	"github.com/spf13/pflag"
	"google.golang.org/protobuf/compiler/protogen"
	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/types/descriptorpb"
)

//go:embed generated.template
var generatedTemplate string

func main() {
	template, err := template.New("pgx").Parse(generatedTemplate)
	if err != nil {
		panic(err)
	}
	slog.Debug("Hello world!")

	var flags pflag.FlagSet
	verboseFlag := flags.Bool("verbose", false, "make logging more verbose")

	opts := protogen.Options{
		ParamFunc: flags.Set,
	}

	opts.Run(func(p *protogen.Plugin) error {
		logLevel := slog.LevelInfo
		if *verboseFlag {
			logLevel = slog.LevelDebug
		}

		textHandler := slog.NewTextHandler(os.Stderr, &slog.HandlerOptions{
			AddSource: false,
			Level:     logLevel,
			ReplaceAttr: func(groups []string, a slog.Attr) slog.Attr {
				if a.Key == slog.TimeKey {
					return slog.Attr{}
				}
				return a
			},
		})
		slog.SetDefault(slog.New(textHandler))

		slog.Debug("Protogen plugin called with following files to be generated", "files", p.Request.FileToGenerate)

		for _, file := range p.Files {
			messagesToGenerate := []*protogen.Message{}
			for _, message := range file.Messages {
				if shouldGenerate(message.Desc.Options().(*descriptorpb.MessageOptions)) {
					messagesToGenerate = append(messagesToGenerate, message)
				}
			}

			for _, message := range messagesToGenerate {
				messageMeta, err := plugin.MetaFromProtobufType(message)
				if err != nil {
					return err
				}

				messageFileContents, err := plugin.GenerateFileForType(messageMeta, template)
				if err != nil {
					return err
				}

				filename := file.GeneratedFilenamePrefix + "_" + strings.ToLower(message.GoIdent.GoName) + "_" + "pgx.pb.go"
				generatedFile := p.NewGeneratedFile(filename, message.GoIdent.GoImportPath)
				generatedFile.Write([]byte("// DO NOT EDIT: file generated by protoc-gen-pgx\n"))
				generatedFile.P("package ", file.GoPackageName, "\n")

				generatedFile.P("import \"" + "github.com/jackc/pgx/v5/pgxpool" + "\"")
				generatedFile.P("import \"" + "github.com/jackc/pgx/v5" + "\"")
				generatedFile.P("import \"" + "context" + "\"")
				generatedFile.P("import \"" + "fmt" + "\"")

				if _, err := generatedFile.Write(messageFileContents); err != nil {
					return err
				}
			}
		}

		return nil
	})
}

func shouldGenerate(in *descriptorpb.MessageOptions) bool {
	if in == nil {
		return false
	}

	v := proto.GetExtension(in, pb.E_ShouldGenerate)
	if v == nil {
		return false
	}

	shouldGenerate, ok := v.(bool)
	if !ok {
		return false
	}
	return shouldGenerate
}
